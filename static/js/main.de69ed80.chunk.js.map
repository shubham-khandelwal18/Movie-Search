{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","p","state","setState","apiurl","e","target","value","prevState","axios","then","data","id","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6NAaeA,MAZf,YAAsC,IAArBC,EAAoB,EAApBA,YAAYC,EAAQ,EAARA,OAC5B,OACO,6BAASC,UAAU,kBACjB,2BAAOC,KAAK,OACXC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,M,gBCCPM,MARf,YAAqC,IAAnBC,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,UACtB,OACG,yBAAKP,UAAU,SAASQ,QAAS,kBAAID,EAAUD,EAAOG,UACnD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCMPC,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,QAAQP,EAAW,EAAXA,UAC1B,OACM,6BAASP,UAAU,WACfc,EAAQC,KAAI,SAAAT,GAAM,OACd,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCUvDU,MAff,YAAsC,IAAtBC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,WACxB,OACK,6BAASnB,UAAU,SACjB,yBAAKA,UAAU,WACf,4BAAKkB,EAASN,MAAd,IAAqB,kCAAQM,EAASE,KAAjB,MACrB,uBAAGpB,UAAU,UAAb,UAA8BkB,EAASG,YACvC,yBAAKrB,UAAU,QACZ,yBAAKU,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEhB,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,YCwDOI,MA9Df,WAAe,IAAD,EACWC,mBAAS,CAC9BC,EAAE,GACFC,EAAE,GACFZ,QAAQ,GACRI,SAAS,KALC,mBACLS,EADK,KACCC,EADD,KAONC,EAAO,2CAmCb,OACE,yBAAK7B,UAAU,OACb,gCACE,6CAEF,8BACG,kBAAC,EAAD,CAAQF,YA1BG,SAACgC,GACjB,IAAIL,EAAEK,EAAEC,OAAOC,MACfJ,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAqBR,EAAGA,QAuBa1B,OAxC5B,SAAC+B,GACD,UAARA,EAAEd,KACHkB,IAAML,EAAO,MAAMF,EAAMF,GAAGU,MAAK,YAAW,IACtCrB,EADqC,EAARsB,KACfvC,OAClB+B,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAqBnB,QAAQA,OAE/Bc,GAAS,SAAAK,GACP,IAAIR,EAAEE,EAAMF,EACZ,OAAO,2BAAIQ,GAAX,IAAqBP,EAAED,aAgCvBE,EAAMb,QAAQ,kBAAC,EAAD,CAASA,QAASa,EAAMb,QAASP,UArBvC,SAAA8B,GACdH,IAAML,EAAO,MAAMQ,GAAIF,MAAK,YAAW,IACjC7B,EADgC,EAAR8B,KAE5BE,QAAQC,IAAIjC,GACZsB,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAqBf,SAASZ,aAiB7B,6BACA,wBAAIN,UAAU,OAAd,wBAA0C2B,EAAMD,GAChD,wBAAI1B,UAAU,OAAd,oDAG+B,oBAAtB2B,EAAMT,SAASN,OAAsB,kBAAC,EAAD,CAAOM,SAAUS,EAAMT,SAAUC,WAlBrE,WACfS,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAqBf,SAAS,cChChBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.de69ed80.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Search({handleInput,search}){\r\n\treturn(\r\n        <section className=\"searchbox-wrap\">\r\n          <input type=\"text\"\r\n           placeholder=\"Search for a movie...\"\r\n           className=\"searchbox\"\r\n           onChange={handleInput}\r\n           onKeyPress={search}\r\n           />\r\n        </section>\r\n\t)\r\n}\r\nexport default Search;"," import React from 'react'\r\n function Result ({result,openPopup}){\r\n    return(\r\n       <div className=\"result\" onClick={()=>openPopup(result.imdbID)}>\r\n          <img src={result.Poster} />\r\n          <h3>{result.Title}</h3>\r\n       </div>\r\n    )\r\n }\r\n export default Result;","import React from 'react';\r\nimport Result from './Result'\r\nfunction Results ({results,openPopup}){\r\n\treturn(\r\n       <section className=\"results\">\r\n          {results.map(result =>(\r\n               <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n          \t))}\r\n       </section>\r\n\t)\r\n}\r\nexport default Results;","import React from 'react'\r\nfunction Popup({selected,closePopup}){\r\n\treturn(\r\n      <section className=\"popup\">\r\n        <div className=\"content\">\r\n\t       <h2>{selected.Title} <span>({selected.Year})</span></h2>\r\n\t       <p className=\"rating\">Rating:{selected.imdbRating}</p>\r\n\t       <div className=\"plot\">\r\n\t          <img src={selected.Poster}/>\r\n\t          <p>{selected.Plot}</p>\r\n\t       </div>\r\n\t       <button className=\"close\" onClick={closePopup}>Close</button>\r\n\t       </div>\r\n\t   </section>\r\n\t)\r\n}\r\nexport default Popup;","import React,{useState} from 'react';\nimport Search from './components/Search.js';\nimport axios from 'axios';\nimport Results from './components/Results';\nimport Popup from './components/Popup.js';\nfunction App(){\n  const [state,setState]=useState({\n    s:\"\",\n    p:\"\",\n    results:[],\n    selected:{}\n  });  \n  const apiurl=\"https://www.omdbapi.com/?apikey=83b255de\";\n  const search=(e)=>{\n    if(e.key===\"Enter\"){\n      axios(apiurl+\"&s=\"+state.s).then(({data})=>{\n        let results =data.Search;\n        setState(prevState=>{\n          return {...prevState,results:results}\n        })\n        setState(prevState=>{\n          let s=state.s\n          return {...prevState,p:s}\n        })\n      });\n    }\n  }\n  const handleInput=(e)=>{\n    let s=e.target.value;\n    setState(prevState=>{\n      return {...prevState,s: s}\n    })\n  }\n  const openPopup=id=>{\n    axios(apiurl+\"&i=\"+id).then(({data})=>{\n      let result=data;\n      console.log(result);\n      setState(prevState=>{\n        return {...prevState,selected:result}\n      });\n    });\n  }\n  const closePopup=()=>{\n    setState(prevState=>{\n      return {...prevState,selected:{}}\n    });\n  }\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Portal</h1>\n      </header>\n      <main>\n         <Search handleInput={handleInput} search={search}/>\n         {state.results?<Results results={state.results} openPopup={openPopup}/>:\n         <div>\n         <h1 className=\"fex\">No results found for {state.p}</h1>\n         <h2 className=\"dex\">Note: Press Enter everytime you want to search </h2>\n         </div>\n       }\n         {(typeof state.selected.Title!=\"undefined\") ? <Popup selected={state.selected} closePopup=\n          {closePopup}/> : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}